{% block pager %}
    /**
     * Check if request contains pager parameters and
     * persist them in session if any.
     */
    protected function parseRequestForPager()
    {
        if ($this->request->query->get('page', 1)) {
            $this->setPage($this->request->query->get('page', 1));
        }

        if ($this->request->query->get('perPage')) {
            $this->setPerPage($this->request->query->get('perPage'));
        }

        if ($this->request->query->get('sort')) {
            $this->setSort($this->request->query->get('sort'), $this->request->query->get('order_by','ASC'));
        }
    }

    /**
     * Store in the session service the current page
     *
     * @param integer $page The page number
     */
    protected function setPage($page)
    {
        $this->get('session')->set($this->getSessionPrefix().'List\Page', $page);
    }

    /**
     * Return the stored page
     *
     * @return integer $page The page number
     */
    protected function getPage()
    {
        return $this->get('session')->get($this->getSessionPrefix().'List\Page', 1);
    }

    /**
     * Return array of possible perPageChoices
     *
     * @return array
     */
    protected function getPerPageChoices()
    {
        return {{ perPageChoices|default([10, 25, 50, 75, 100])|as_php }};
    }

    /**
     * Store in the session service the perPage
     *
     * @param integer $perPage The perPage number
     */
    protected function setPerPage($perPage)
    {
        $this->get('session')->set($this->getSessionPrefix().'List\PerPage', $perPage);
    }

    /**
     * Return the stored perPage
     *
     * @return integer $perPage The perPage number
     */
    protected function getPerPage()
    {
        return $this->get('session')->get($this->getSessionPrefix().'List\PerPage', {{ maxPerPage is defined ? maxPerPage : 10 }});
    }

    protected function getPager()
    {
        $paginator = new Pagerfanta(new PagerAdapter($this->getQuery()));
        $paginator->setMaxPerPage($this->getPerPage());
        $paginator->setCurrentPage($this->getPage(), false, true);

        return $paginator;
    }
{% endblock %}
