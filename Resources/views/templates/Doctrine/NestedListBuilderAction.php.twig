{% extends '@AdmingeneratorGenerator/templates/CommonAdmin/NestedListAction/NestedListBuilderAction.php.twig' %}
{% block getQuery -%}
    protected function getQuery()
    {
        $query = $this->buildQuery();

        return $query;
    }

    protected function buildQuery()
    {
        return $this->doctrine
                    ->getManagerForClass('{{ model }}')
                    ->getRepository('{{ model }}')
                    ->getChildrenQueryBuilder()
                    ->add('orderBy', 'node.{{ builder.treeConfiguration.root }} ASC, node.{{ builder.treeConfiguration.left }} ASC')
                    ->getQuery();
    }

    protected function getTree()
    {
        $result = $this->buildQuery()->getResult();

        return new \Doctrine\Common\Collections\ArrayCollection($result);
    }
{% endblock %}

{% block addJoinFor -%}
    protected function addJoinFor($table, $query)
    {
        $query->leftJoin('q.'.$table, $table);
    }
{% endblock %}

{% block nested_moveAction -%}
    public function nested_moveAction($dragged, $action, $dropped)
    {
        if(!in_array($action, array('before', 'in', 'after'))) {
            throw new NotFoundHttpException("Unknown action");
        }

        $em = $this->doctrine->getManagerForClass('{{ model }}');
        $repo = $em->getRepository('{{ model }}');

        $dragged = $repo->findOneBy{{ builder.getFieldGuesser().getModelPrimaryKeyName(model)|classify }}($dragged);
        $dropped = $repo->findOneBy{{ builder.getFieldGuesser().getModelPrimaryKeyName(model)|classify }}($dropped);

        if (!$dragged || !$dropped) {
            throw new NotFoundHttpException("Could not find the nodes");
        }

        switch($action) {
          case 'before':
            $repo->persistAsPrevSiblingOf($dragged, $dropped);
            break;
          case 'in':
            $repo->persistAsFirstChildOf($dragged, $dropped);
            break;
          case 'after':
            $repo->persistAsNextSiblingOf($dragged, $dropped);
            break;
        }

        $em->flush();

        return new Response();
    }
{% endblock %}
