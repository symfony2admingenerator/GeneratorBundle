{% use '@AdmingeneratorGenerator/templates/CommonAdmin/security_action.php.twig' %}
{% use '@AdmingeneratorGenerator/templates/CommonAdmin/csrf_protection.php.twig' %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\{{ builder.generator.GeneratedControllerFolder }};

{{- block('security_use') }}

{{- block('csrf_protection_use') }}

use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\PropertyAccess\PropertyAccess;
use Doctrine\Inflector\InflectorFactory;

{% if namespace_prefix is empty %}
class ExcelController extends \{{ bundle_name }}\Controller\{{ builder.generator.baseGeneratorName }}\ListController
{% else %}
class ExcelController extends \{{ namespace_prefix }}\{{ bundle_name }}\Controller\{{ builder.generator.baseGeneratorName }}\ListController
{% endif %}
{
    /**
     * Generates the Excel object and send a streamed response
     * @return \Symfony\Component\HttpFoundation\StreamedResponse
     */
    public function excelAction(Request $request, $key = null)
    {
        $this->request = $request;

        if ($key === null) {
          // Standard credential check
          {{ block('security_action') }}
        } else {
          {% for eaction in builder.excelActions %}
            {% if eaction.credentials is not empty and eaction.credentials is not same as('AdmingenAllowed') %}
              // Check specific credentials
              $this->denyAccessUnlessValidateCredentials('{{ eaction.credentials }}');
            {% else %}
              // Check default if not specific credentials are given
              {{ block('security_action') }}
            {% endif %}
          {% endfor %}
        }

        $spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
        $this->createSpreadsheetObject($spreadsheet);
        $sheet = $spreadsheet->setActiveSheetIndex(0);
        $results = $this->getResults();

        $suffix = InflectorFactory::create()->build()->classify($key === null ? '' : $key);
        if (!method_exists($this,"createSpreadsheetHeader$suffix")) {
           // back to defaults
           $key = null;
           $suffix = '';
        }

        // Create the first bold row in the Excel spreadsheet
        call_user_func(array($this,"createSpreadsheetHeader$suffix"), $sheet);
        // Print the data
        call_user_func(array($this,"createSpreadsheetData$suffix"), $sheet, $results);

        $fileType = call_user_func(array($this,"getSpreadsheetFileType$suffix"));
        $fileName = call_user_func(array($this,"getSpreadsheetFileName$suffix"), $fileType);
        $mimeType = $this->getSpreadsheetMimeType($fileType);

        // Create the Writer, Response and add header
        $writer = \PhpOffice\PhpSpreadsheet\IOFactory::createWriter($spreadsheet, $fileType);
        $response = new StreamedResponse(
          function () use ($writer) {
            $tempFile = $this->getParameter('kernel.cache_dir').'/'.
              rand(0, getrandmax()).rand(0, getrandmax()).".tmp";
            $writer->save($tempFile);
            readfile($tempFile);
            unlink($tempFile);
          },
          200, array()
        );
        $response->headers->set('Content-Type', $mimeType.'; charset=utf-8');
        $response->headers->set('Content-Disposition', 'attachment;filename='.$fileName);

        return $response;
    }

    protected function getSpreadsheetMimeType($fileType)
    {
        switch (strtoupper($fileType))
        {
            case 'Csv': return 'text/csv';
            case 'Pdf': return 'application/pdf';
            case 'Xls': return 'application/vnd.ms-excel';
        }
        return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }

    protected function getSpreadsheetExtension($fileType)
    {
        switch (strtoupper($fileType))
        {
            case 'Csv': return 'csv';
            case 'Pdf': return 'pdf';
            case 'Xls': return 'xls';
        }
        return 'xlsx';
    }

    protected function getSpreadsheetFileType()
    {
        return '{{ builder.filetype }}';
    }

    protected function getSpreadsheetFileName($fileType)
    {
        return $this->fixSpreadsheetExtension('{{ builder.filename }}', $fileType);
    }

    protected function fixSpreadsheetExtension($fileName, $fileType)
    {
        $path_parts = pathinfo($fileName);
        if (!isset($path_parts['filename'])) $path_parts['filename'] = 'report';
        $path_parts['extension'] = $this->getSpreadsheetExtension($fileType);
        return $path_parts['filename'] . '.' . $path_parts['extension'];
    }


    /**
    * Override this method to add your own creator, title and more to the spreadsheet
    */
    protected function createSpreadsheetObject(\PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet)
    {
        $spreadsheet->getProperties()->setCreator("AdminGeneratorBundle")
        ->setTitle('AdminGenerator Excel Export')
        ->setSubject("AdminGenerator Excel Export")
        ->setDescription("AdminGenerator Excel export");
    }

    /**
    * Fill the spreadsheet with the headers
    */
    protected function createSpreadsheetHeader(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet)
    {
        $translator = $this->getTranslator();

        $colNum = 1;
        {% for column in builder.columns %}
          {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
            {% set credentials = column.credentials %}
            if ($this->validateCredentials('{{ credentials }}')) {
          {% endif %}
          $sheet->setCellValueByColumnAndRow($colNum, 1, $translator->trans("{{ column.label }}", array(), '{{ i18n_catalog|default("Admin") }}'));
          $columnLetter = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::stringFromColumnIndex($colNum);
          $sheet->getStyle($columnLetter . '1')->getFont()->setBold(true);
          $sheet->getColumnDimension($columnLetter)->setAutoSize(true);

          $colNum++;
          {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
            }
          {% endif %}
        {% endfor %}
    }

    /**
    * Fills the Excel spreadsheet with data
    */
    protected function createSpreadsheetData(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet, $results)
    {
        $row = 2;

        foreach($results as ${{ builder.ModelClass }}) {
            $colNum = 1;
            {% for name,column in builder.columns %}
              {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
                {% set credentials = column.credentials %}
                if ($this->validateCredentials('{{ credentials }}', ${{ builder.ModelClass }})) {
              {% endif %}
              $data = $this->getValueForCell('{{ column.getter }}', ${{ builder.ModelClass }});
              $formattedValue = $this->format{{ name|classify|php_name }}($data);

              // Convert DateTime object to given format
              if ($formattedValue instanceof \DateTime){
                  $formattedValue = $formattedValue->format('{{ builder.dateTimeFormat }}');
              }

              $sheet->setCellValueByColumnAndRow($colNum, $row, $formattedValue);
              {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
                }
              {% endif %}
              // Inc is outside of the credentials check to be sync with headers.
              // Otherwise if column X is authorized but depending on object, there will
              // be some offset. Putting inc outise of the check will always update it.
              $colNum++;
            {% endfor %}

            $row++;
        }
    }

{% for keyname, columns in builder.export %}

  /**
  * Fill the spreadsheet with the headers for {{ keyname }}
  */
  protected function createSpreadsheetHeader{{ keyname|classify|php_name }}(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet)
  {
      {% set credentials = builder.exportCredentials(keyname) %}
      {{ block('security_action') }}

      $translator = $this->getTranslator();

      $colNum = 1;
      {% for column in columns %}
        {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
          {% set credentials = column.credentials %}
          if ($this->validateCredentials('{{ credentials }}')) {
        {% endif %}
        $sheet->setCellValueByColumnAndRow($colNum, 1, $translator->trans("{{ column.label }}", array(), '{{ i18n_catalog|default("Admin") }}'), true);
        $columnLetter = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::stringFromColumnIndex($colNum);
        $sheet->getStyle($columnLetter . '1')->getFont()->setBold(true);
        $sheet->getColumnDimension($columnLetter)->setAutoSize(true);

        $colNum++;
        {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
          }
        {% endif %}
      {% endfor %}
  }

  /**
  * Fills the spreadsheet with data for {{ keyname }}
  */
  protected function createSpreadsheetData{{ keyname|classify|php_name }}(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet, $results)
  {
      $row = 2;

      foreach($results as ${{ builder.ModelClass }}) {
          $colNum = 1;
          {% for name,column in columns %}
            {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
              {% set credentials = column.credentials %}
              if ($this->validateCredentials('{{ credentials }}', ${{ builder.ModelClass }})) {
            {% endif %}
            $data = $this->getValueForCell('{{ column.getter }}', ${{ builder.ModelClass }});
            $formattedValue = $this->format{{ name|classify|php_name }}($data);

            // Convert DateTime object to given format
            if ($formattedValue instanceof \DateTime){
            $formattedValue = $formattedValue->format('{{ builder.dateTimeFormat(keyname) }}');
            }

            $sheet->setCellValueByColumnAndRow($colNum, $row, $formattedValue);
            {% if column.credentials is not empty and column.credentials is not same as('AdmingenAllowed') %}
              }
            {% endif %}
            // Inc is outside of the credentials check to be sync with headers.
            // Otherwise if column X is authorized but depending on object, there will
            // be some offset. Putting inc outise of the check will always update it.
            $colNum++;
          {% endfor %}

          $row++;
      }
  }

  protected function getSpreadsheetFileType{{ keyname|classify|php_name }}()
  {
      return '{{ builder.filetype(keyname) }}';
  }

  protected function getSpreadsheetFileName{{ keyname|classify|php_name }}($fileType)
  {
      return $this->fixExtension('{{ builder.filename(keyname) }}', $fileType);
  }


{% endfor %}

    protected function getExcelMimeType($fileType)
    {
        switch (strtoupper($fileType))
        {
            case 'CSV': return 'text/csv';
            case 'PDF': return 'application/pdf';
            case 'EXCEL5': return 'application/vnd.ms-excel';
        }
        return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }

    protected function getExcelExtension($fileType)
    {
        switch (strtoupper($fileType))
        {
            case 'CSV': return 'csv';
            case 'PDF': return 'pdf';
            case 'EXCEL5': return 'xls';
        }
        return 'xlsx';
    }

    protected function getExcelFileType()
    {
        return '{{ builder.filetype }}';
    }

    protected function getExcelFileName($fileType)
    {
        return $this->fixExtension('{{ builder.filename }}', $fileType);
    }

    protected function fixExtension($fileName, $fileType)
    {
        $path_parts = pathinfo($fileName);
        if (!isset($path_parts['filename'])) $path_parts['filename'] = 'report';
        $path_parts['extension'] = $this->getExcelExtension($fileType);
        return $path_parts['filename'] . '.' . $path_parts['extension'];
    }
    
{% for keyname, columns in builder.export %}

    protected function getExcelFileType{{ keyname|classify|php_name }}()
    {
        return '{{ builder.filetype(keyname) }}';
    }

    protected function getExcelFileName{{ keyname|classify|php_name }}($fileType)
    {
        return $this->fixExtension('{{ builder.filename(keyname) }}', $fileType);
    }

{% endfor %}


    /**
     * Gets the value from the given field that will be place at an Excel cell
     *
     * @param string $field   The name of the field to extract the value
     * @param mixed  ${{ builder.ModelClass }} The main entity object
     *
     * @return $data The data to place on the respective Excel cell
     */
    protected function getValueForCell($field, ${{ builder.ModelClass }})
    {
        $accessor = PropertyAccess::createPropertyAccessor();
        $data = ${{ builder.ModelClass }};
        
        // Retrieve relations, but stop on $data = null
        while (($pos = strpos($field, '.')) > 0 && $data !== null) {
            $data = $accessor->getValue($data, substr($field, 0, $pos));
            $field = substr($field, $pos + 1);
        }
        
        if($data !== null) {
            $data = $accessor->getValue($data, $field);
        }
        
        return $data;
    }

    {% block getResults -%}
    protected function getResults()
    {
        // ORM JOB
    }
    {% endblock %}

    {% for name,column in builder.columns %}
    /**
     * Format column {{ name }} value
     *
     * @param mixed The value
     * @return mixed The formated value
     */
    protected function format{{ name|classify|php_name }}($value)
    {
        return $value;
    }

    {% endfor %}

    {{- block('csrf_check_token') -}}
}
