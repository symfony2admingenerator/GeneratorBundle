{% use '@AdmingeneratorGenerator/templates/CommonAdmin/ActionsAction/object_action.php.twig' %}
{% use '@AdmingeneratorGenerator/templates/CommonAdmin/ActionsAction/batch_action.php.twig' %}
{% use '@AdmingeneratorGenerator/templates/CommonAdmin/ActionsAction/object_delete.php.twig' %}
{% use '@AdmingeneratorGenerator/templates/CommonAdmin/ActionsAction/batch_delete.php.twig' %}
{% use '@AdmingeneratorGenerator/templates/CommonAdmin/security_action.php.twig' %}
{% use '@AdmingeneratorGenerator/templates/CommonAdmin/csrf_protection.php.twig' %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\{{ builder.generator.GeneratedControllerFolder }};

use {{ builder.generator.baseController }} as BaseController;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Admingenerator\GeneratorBundle\Exception\ValidationException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

{{ block('csrf_protection_use') }}

{{ block('security_use') }}

class ActionsController extends BaseController
{
    /**
     * Call custom object action based on $action parameter
     */
    public function objectAction(Request $request, $pk, $action)
    {
        $this->request = $request;
        $methodName = 'attemptObject'.ucfirst(strtolower($this->cleanMethodName($action)));
        if (!method_exists($this, $methodName)) {
            throw new NotFoundHttpException(sprintf('Undefined "%s" method. Does object action "%s" exist in your generator file?', $methodName, $action));
        }

        return $this->$methodName($pk);
    }

    /**
     * Call custom batch action based on $action parameter
     */
    public function batchAction(Request $request)
    {
        $this->request = $request;
        $action = $request->get('action');
        $selected = $request->get('selected');

        if (!$selected || !$action) {
            $this->get('session')->getFlashBag()->add(
                'warning',
                $this->get('translator')->trans(
                    "action.batch.warning",
                    array(),
                    'Admingenerator'
                )
            );

            return $this->redirect($this->generateUrl("{{ builder.baseActionsRoute }}_list"));
        }

        $methodName = 'attemptBatch'.ucfirst(strtolower($this->cleanMethodName($action)));
        if (!method_exists($this, $methodName)) {
            throw new NotFoundHttpException(sprintf('Undefined "%s" method. Does batch action "%s" exist in your generator file?', $methodName, $action));
        }

        return $this->$methodName($selected);
    }

    {% for action in builder.ObjectActions %}
        {% if action.name is same as('delete') %}
            {{- block('attemptObjectDelete') -}}
            {{- block('executeObjectDelete') -}}
            {{- block('successObjectDelete') -}}
            {{- block('errorObjectDelete') -}}
            {{- block('notFoundObjectDelete') -}}
        {% else %}
            {{- block('attemptObjectAction') -}}
            {{- block('executeObjectAction') -}}
            {{- block('successObjectAction') -}}
            {{- block('errorObjectAction') -}}
        {% endif %}
    {% endfor %}

    {% for action in builder.BatchActions %}
        {% if action.name is same as('delete') %}
            {{- block('attemptBatchDelete') -}}
            {{- block('executeBatchDelete') -}}
            {{- block('successBatchDelete') -}}
            {{- block('errorBatchDelete') -}}
        {% else %}
            {{- block('attemptBatchAction') -}}
            {{- block('executeBatchAction') -}}
            {{- block('successBatchAction') -}}
            {{- block('errorBatchAction') -}}
        {% endif %}
    {% endfor %}

    {{- block('attemptBatchNone') -}}

    {{- block('csrf_check_token') -}}

    {{- block('security_check') }}

    {% block getObject %}
    protected function getObject($pk)
    {
        //The orm replace this method
    }
    {% endblock %}

    {% block getQuery -%}
    protected function getObjectQuery($pk)
    {
        //ORM do JOB
    }
    {% endblock %}

    {% block saveObject -%}
    protected function saveObject(\{{ model }} ${{ builder.ModelClass }})
    {
        //ORM do JOB
    }
    {% endblock %}

    /**
     * Get additional parameters for rendering.
     *
     * @param \{{ model }} ${{ builder.ModelClass }} Your \{{ model }} object
     * @param string $action Action
     * @return array Additional render parameters
     */
    protected function getAdditionalRenderParameters(\{{ model }} ${{ builder.ModelClass }}, $action)
    {
        return array();
    }

    /**
     * Remove invalid characters for method name.
     *
     * @return string
     */
    protected function cleanMethodName($method)
    {
        return preg_replace('/[^\w]+/', '', $method);
    }

    /**
     * Render errors as HTML DL list
     *
     * @param ValidationException $exception
     * @param string $translationDomain
     * @return string Raw HTML string
     */
    protected function renderErrorsAsHTML(ValidationException $exception, $translationDomain)
    {
        $html = '';

        if (count($exception->getErrors()) > 0) {
            $html = '<dl class="dl-horizontal dl-actions-error">';
            foreach ($exception->getErrors() as $error) {
                $label = $this->get('translator')->trans(ucfirst($error->getPropertyPath()), array(), $translationDomain);

                $html .= '<dt>'.$label.'</dt><dd>'.$error->getMessage().'</dd>';
            }
            $html .= '</dl>';
        }

        return $html;
    }
}
