{% extends '@AdmingeneratorGenerator/templates/CommonAdmin/ActionsAction/ActionsBuilderAction.php.twig' %}

{% block getObject %}

    /**
     * Get object \{{ model }} with identifier $pk
     *
     * @param mixed $pk
     * @return \{{ model }}
     */
    protected function getObject($pk)
    {
        $pk = is_numeric($pk) ? intval($pk) : $pk;
        ${{ builder.ModelClass }} = $this->getObjectQuery($pk)->getSingleResult();

        if (!${{ builder.ModelClass }}) {
            throw new NotFoundHttpException("No \{{ model }} found on {{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }} : $pk");
        }

        return ${{ builder.ModelClass }};
    }

{% endblock %}

{% block getQuery -%}
    /**
     * Get query from query builder
     *
     * @param mixed $pk
     * @return Doctrine\ODM\Query
     */
    protected function getObjectQuery($pk)
    {
        return $this->getObjectQueryBuilder($pk)->getQuery();
    }

    /**
     * Creates a QueryBuilder instance filtering on {{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }}
     * property.
     *
     * @param mixed $pk
     * @return Doctrine\ODM\QueryBuilder
     */
    protected function getObjectQueryBuilder($pk)
    {
        return $this->getDocumentManager()
            ->getRepository('{{ model }}')
            ->createQueryBuilder()
            ->field('{{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }}')->equals($pk);
    }
{% endblock %}

{% block executeObjectDelete %}

    protected function executeObjectDelete(\{{ model }} ${{ builder.ModelClass }})
    {
        $dm = $this->getDocumentManager();
        $dm->remove(${{ builder.ModelClass }});
        $dm->flush();
        $dm->clear();
    }

{% endblock %}

{% block executeBatchDelete %}

    protected function executeBatchDelete(array $selected)
    {
        $dm = $this->getDocumentManager();
{% if admingenerator_config('use_doctrine_odm_batch_remove') %}
        $objects = $dm->getRepository('{{ model }}')
            ->findBy(array('_id' => $selected));

        foreach ($objects as $object) {
            $em->remove($object);
        }

        $dm->flush();
        $dm->clear();
{% else %}
        $dm
            ->createQueryBuilder('{{ model }}')
            ->remove()
            ->field('_id')->in($selected)
            ->getQuery()
            ->execute();
{% endif %}
    }

{% endblock %}

{% block saveObject %}

    protected function saveObject(\{{ model }} ${{ builder.ModelClass }}, array $validationGroups = array(), $debug = true)
    {
        $validator = $this->getValidator();
        $errors = $validator->validate(${{ builder.ModelClass }}, $validationGroups, false, true);

        if (count($errors) > 0) {
            if ($debug) {
                $this->getLogger()->error((string) $errors);
            }
            throw new ValidationException($errors);
        } else {
            $em = $this->getDocumentManager();
            $em->persist(${{ builder.ModelClass }});
            $em->flush();
        }
    }
{% endblock %}
